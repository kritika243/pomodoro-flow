{"version":3,"sources":["SettingsContext.js","BackBtn.js","Controls.js","PauseBtn.js","PlayBtn.js","SettingsBtn.js","Timer.js","App.js","reportWebVitals.js","index.js"],"names":["SettingsContext","react","createContext","BackBtn","props","className","xmlns","class","viewBox","fill","d","Controls","controlsInfo","useContext","style","textAlign","workMinutes","ReactSlider","thumbClassName","trackClassName","value","onChange","newValue","setWorkMinutes","min","max","breakMinutes","setBreakMinutes","marginTop","onClick","setShowControls","PauseBtn","PlayBtn","SettingsBtn","Timer","useState","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","useRef","isPausedRef","modeRef","useEffect","current","interval","setInterval","nextMode","nextSeconds","switchMode","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","text","styles","buildStyles","textColor","pathColor","trailColor","App","showControls","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adc9fba7.chunk.js","sourcesContent":["import react from 'react'\nimport { createContext } from 'react'\n\nconst SettingsContext = react.createContext({})\n\nexport default SettingsContext\n","import React from 'react'\n\nconst BackBtn = (props) => {\n  return (\n    <button {...props} className='with-text'>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z'\n          clip-rule='evenodd'\n        />\n      </svg>\n      Go Back\n    </button>\n  )\n}\n\nexport default BackBtn\n","import React from 'react'\nimport ReactSlider from 'react-slider'\nimport { useContext } from 'react'\nimport SettingsContext from './SettingsContext'\nimport './slider.css'\nimport BackBtn from './BackBtn'\n\nconst Controls = () => {\n  const controlsInfo = useContext(SettingsContext)\n  return (\n    <div style={{ textAlign: 'left' }}>\n      <label>Work: {controlsInfo.workMinutes}:00</label>\n      <ReactSlider\n        className={'slider'}\n        thumbClassName={'thumb'}\n        trackClassName={'track'}\n        value={controlsInfo.workMinutes}\n        onChange={(newValue) => controlsInfo.setWorkMinutes(newValue)}\n        min={1}\n        max={120}\n      />\n\n      <label>Break: {controlsInfo.breakMinutes}:00 </label>\n      <ReactSlider\n        className={'slider blue'}\n        thumbClassName={'thumb'}\n        trackClassName={'track'}\n        value={controlsInfo.breakMinutes}\n        onChange={(newValue) => controlsInfo.setBreakMinutes(newValue)}\n        min={1}\n        max={120}\n      />\n      <div style={{ textAlign: 'center', marginTop: '30px' }}>\n        <BackBtn onClick={() => controlsInfo.setShowControls(false)} />\n      </div>\n    </div>\n  )\n}\n\nexport default Controls\n","import React from 'react'\n\nconst PauseBtn = (props) => {\n  return (\n    <button {...props}>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z'\n          clip-rule='evenodd'\n        />\n      </svg>\n    </button>\n  )\n}\n\nexport default PauseBtn\n","import React from 'react'\n\nconst PlayBtn = (props) => {\n  return (\n    <button {...props}>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z'\n          clip-rule='evenodd'\n        />\n      </svg>\n    </button>\n  )\n}\n\nexport default PlayBtn\n","import React from 'react'\n\nconst SettingsBtn = (props) => {\n  return (\n    <button {...props} className='with-text'>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z'\n          clip-rule='evenodd'\n        />\n      </svg>\n      Controls\n    </button>\n  )\n}\n\nexport default SettingsBtn\n","import React from 'react'\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar'\nimport 'react-circular-progressbar/dist/styles.css'\nimport { useContext, useState, useEffect, useRef } from 'react'\nimport PauseBtn from './PauseBtn'\nimport PlayBtn from './PlayBtn'\nimport SettingsBtn from './SettingsBtn'\nimport SettingsContext from './SettingsContext'\n\nconst color1 = '#ffb30f'\nconst color2 = '#96cdff'\n\nconst Timer = () => {\n  const controlsInfo = useContext(SettingsContext)\n  const [isPaused, setIsPaused] = useState(true)\n  const [mode, setMode] = useState('work') // work / break / null\n  const [secondsLeft, setSecondsLeft] = useState(0)\n\n  const secondsLeftRef = useRef(secondsLeft)\n  const isPausedRef = useRef(isPaused)\n  const modeRef = useRef(mode)\n\n  function tick() {\n    secondsLeftRef.current--\n    setSecondsLeft(secondsLeftRef.current)\n  }\n\n  useEffect(() => {\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work'\n      const nextSeconds =\n        (nextMode === 'work'\n          ? controlsInfo.workMinutes\n          : controlsInfo.breakMinutes) * 60\n\n      setMode(nextMode)\n      modeRef.current = nextMode\n\n      setSecondsLeft(nextSeconds)\n      secondsLeftRef.current = nextSeconds\n    }\n\n    secondsLeftRef.current = controlsInfo.workMinutes * 60\n    setSecondsLeft(secondsLeftRef.current)\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode()\n      }\n\n      tick()\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [controlsInfo])\n\n  const totalSeconds =\n    mode === 'work'\n      ? controlsInfo.workMinutes * 60\n      : controlsInfo.breakMinutes * 60\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100)\n\n  const minutes = Math.floor(secondsLeft / 60)\n  let seconds = secondsLeft % 60\n  if (seconds < 10) seconds = '0' + seconds\n  return (\n    <>\n      <div>\n        <CircularProgressbar\n          value={percentage}\n          text={minutes + ':' + seconds}\n          styles={buildStyles({\n            textColor: 'white',\n            pathColor: mode === 'work' ? color1 : color2,\n            trailColor: 'rgba(255, 255, 255, 0.562)',\n          })}\n        />\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        {isPaused ? (\n          <PlayBtn\n            onClick={() => {\n              setIsPaused(false)\n              isPausedRef.current = false\n            }}\n          />\n        ) : (\n          <PauseBtn\n            onClick={() => {\n              setIsPaused(true)\n              isPausedRef.current = true\n            }}\n          />\n        )}\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        <SettingsBtn\n          onClick={() => {\n            controlsInfo.setShowControls(true)\n          }}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default Timer\n","import { useState } from 'react'\nimport './App.css'\nimport Controls from './Controls'\nimport SettingsContext from './SettingsContext'\nimport Timer from './Timer'\n\nfunction App() {\n  const [showControls, setShowControls] = useState(false)\n  const [workMinutes, setWorkMinutes] = useState(45)\n  const [breakMinutes, setBreakMinutes] = useState(15)\n  return (\n    <main>\n      <SettingsContext.Provider\n        value={{\n          workMinutes,\n          breakMinutes,\n          setWorkMinutes,\n          setBreakMinutes,\n          showControls,\n          setShowControls,\n        }}\n      >\n        {showControls ? <Controls /> : <Timer />}\n      </SettingsContext.Provider>\n    </main>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}